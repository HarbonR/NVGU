#include <stdio.h> /// Стандартная библиотека ввода-вывода
#include <stdlib.h> /// Стандартная библиотека
#include <locale.h> /// Библиотека для локализации языка

void sortString (char *inputStr)
{
    //==================================================
    /// Определяем длинну строки
    int lengthStr = 0; /// Переменная длина inputStr
    while (inputStr[lengthStr] != '\0')
        lengthStr++;
    //==================================================
    /// Добавляем в конец строки пробел
    inputStr[lengthStr] = ' ';
    //==================================================
    /// Определяем количество слов в строке
    int numberWords = 0;
    for (int i = 0; inputStr[i] != '\0'; i++)
    {
        if (inputStr[i] == ' ')
            numberWords++;
    }
    //==================================================
    /// Создаём двухмерный динамический массив
    char **arrayStr = (char**)malloc(30 * sizeof(char*));
    for (int i = 0; i < numberWords; i++)
        arrayStr[i] = (char*)malloc(numberWords * sizeof(char));
    //==================================================
    int j = 0;
    int k = 0;
    /// Заполняем массив строк строкой (Разделяем строку по словам и заполняем массив строк)
    for (int i = 0; i < lengthStr; i++)
    {
        if (inputStr[i] == ' ')
        {
            j++;
            k = 0;
        }
        else
        {
            arrayStr[j][k] = inputStr[i];
            k++;
        }
    }
    //==================================================
    /// Выполняем сортировку (Пузырьком)
    char *str; /// Ссылка на строку
    for (int i = 0; i < numberWords - 1 ; i++)
    {
        for (int j = i + 1; j < numberWords; j++)
        {
            for (int k = 0; arrayStr[i][k] != '\0' || arrayStr[j][k] != '\0'; k++)
            {
                if (arrayStr[i][k] > arrayStr[j][k]) /// Если буква первого слова под индексом k > буквы второго слово под тем же индексом меняем местами эти слова
                {
                    str = arrayStr[j];
                    arrayStr[j] = arrayStr[i];
                    arrayStr[i] = str;
                    break; /// Выйти из цикла
                }
                else if (arrayStr[i][k] == arrayStr[j][k])
                    continue; /// Продолжить
                else
                    break; /// Выйти из цикла
            }
        }
    }
    //==================================================
    /// Заполняем строку отсортированным массивом строк
    k = 0;
    for (int i = 0; i < numberWords; i++)
    {
        for (int j = 0; arrayStr[i][j] != '\0'; j++)
        {
            inputStr[k] = arrayStr[i][j];
            k++;
        }
        inputStr[k] = ' ';
        k++;
    }
    //==================================================
    /// Очищаем динамическую память
    for (int i = 0; i < numberWords; i++)
        free(arrayStr[i]);
    free(arrayStr);
    //==================================================
}

int main ()
{
    setlocale (LC_ALL, "Rus"); /// Локализуем русский язык
    //==================================================
    FILE *inputFile; /// Переменная типа FILE
    FILE *outputFile; /// Переменная типа FILE
    char inputStr[30] = "bb ba aa";
    char variableStr[30]; /// Переменная строка для сохранения строки из файла input сортировки и вывода в файл output
    //==================================================
    /// Заполняем строку тернирующим нулём (конец строки)
    for (int i = 0; i < 30; i++)
        variableStr[i] = '\0';
    //==================================================
    /*
    printf ("Запишите строку: ");
    gets (inputStr); /// Функция записывает строку из консоли в переменную inputStr
    */
    //==================================================
    inputFile = fopen ("inputFile.txt", "wt"); /// Открываем текстовый фаил для записи
    if (inputFile == NULL) /// Если не получилось открыть фаил
    {
        printf("Ошибка открытия файла");
    }
    else /// Иначе
    {
        fputs(inputStr, inputFile); /// Записываем строку в файл
        fclose(inputFile); /// Сохраняем и закрываем файл
    }
    //==================================================
    /// Открываем файл и записываем строку из файла в пееременную строку
    inputFile = fopen ("inputFile.txt", "rt"); /// Открываем текстовый фаил для чтения
    if (inputFile == NULL) /// Если не получилось открыть фаил
    {
        printf("Ошибка открытия файла");
    }
    else /// Иначе
    {
        fgets(variableStr, 30, inputFile); /// Записываем строку в файл
        fclose(inputFile); /// Сохраняем и закрываем файл
    }
    //==================================================
    printf ("Исходная строка: %s", variableStr);
    sortString (variableStr);
    printf ("\nОтсортированная строка: %s", variableStr);
    //==================================================
    outputFile = fopen ("outputFile.txt", "wt"); /// Открываем текстовый фаил для записи
    if (outputFile == NULL) /// Если не получилось открыть фаил
    {
        printf("Ошибка открытия файла");
    }
    else /// Иначе
    {
        fputs(variableStr, outputFile); /// Записываем строку в файл
        fclose(outputFile); /// Сохраняем и закрываем файл
    }
    //==================================================
    return 0;
 }